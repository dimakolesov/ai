"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ Telegram Stars
"""

from aiogram import Router, F
from aiogram.types import Message, PreCheckoutQuery, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from telegram_stars import stars_payment
from logger import bot_logger
from error_handler import handle_errors, handle_telegram_errors
from db import grant_access, grant_lifetime_access, get_user_language
from admin_system import admin_system
from referral_system import referral_system
from locales import locale_manager, Language

stars_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot = None

@stars_router.message(Command("premium"))
@handle_errors
@handle_telegram_errors
async def premium_subscription_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if admin_system.is_admin(message.from_user.username):
        await message.answer(
            "üëë –ê–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
        )
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_command(message.from_user.id, "premium")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞
        invoice_data = stars_payment.create_payment_invoice_data()
        
        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç
        await message.answer_invoice(**invoice_data)
        
        bot_logger.log_info(f"Payment invoice sent to user {message.from_user.id}")
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to send payment invoice to user {message.from_user.id}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@stars_router.pre_checkout_query()
@handle_errors
@handle_telegram_errors
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        bot_logger.log_info(f"Pre-checkout query from user {pre_checkout_query.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
        if pre_checkout_query.invoice_payload not in [stars_payment.premium_payload, stars_payment.lifetime_payload]:
            await pre_checkout_query.answer(
                ok=False,
                error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞"
            )
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await pre_checkout_query.answer(ok=True)
        
        bot_logger.log_info(f"Pre-checkout approved for user {pre_checkout_query.from_user.id}")
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Pre-checkout error for user {pre_checkout_query.from_user.id}")
        await pre_checkout_query.answer(
            ok=False,
            error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )

@stars_router.message(F.successful_payment)
@handle_errors
@handle_telegram_errors
async def successful_payment_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    
    try:
        user_id = message.from_user.id
        payment = message.successful_payment
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        bot_logger.log_info(f"Successful payment from user {user_id}: {payment.total_amount} {payment.currency}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
        if payment.invoice_payload == stars_payment.premium_payload:
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π
            await grant_access(user_id, 30)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
            referrer_id = await referral_system.process_subscription_purchase(user_id)
            if referrer_id:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏
                try:
                    await bot.send_message(
                        referrer_id,
                        f"üí∞ –¢—ã –ø–æ–ª—É—á–∏–ª –∫–æ–º–∏—Å—Å–∏—é!\n\n"
                        f"–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ç—ã –ø–æ–ª—É—á–∏–ª {referral_system.SUBSCRIPTION_PRICE * referral_system.COMMISSION_RATE:.2f} ‚ÇΩ!\n\n"
                        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ! üíé"
                    )
                except Exception as e:
                    bot_logger.log_system_error(e, f"Failed to notify referrer {referrer_id} about commission")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_text = f"""
üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

‚úÖ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏:
‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üíé –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:
‚Ä¢ –°—É–º–º–∞: {payment.total_amount} ‚≠ê
‚Ä¢ ID –ø–ª–∞—Ç–µ–∂–∞: {payment.telegram_payment_charge_id}
‚Ä¢ –î–∞—Ç–∞: {payment.date}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º–∏! üíñ
"""
            
            await message.answer(success_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
            bot_logger.log_admin_action("premium_granted", {
                "user_id": user_id,
                "payment_id": payment.telegram_payment_charge_id,
                "amount": payment.total_amount,
                "days": 30
            })
            
        elif payment.invoice_payload == stars_payment.lifetime_payload:
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
            await grant_lifetime_access(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_text = f"""
üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üöÄ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏:
‚Ä¢ –ü–û–ñ–ò–ó–ù–ï–ù–ù–´–ô –î–û–°–¢–£–ü
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ù–ê–í–°–ï–ì–î–ê
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏–≥—Ä–∞–º –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üíé –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:
‚Ä¢ –°—É–º–º–∞: {payment.total_amount} ‚≠ê
‚Ä¢ ID –ø–ª–∞—Ç–µ–∂–∞: {payment.telegram_payment_charge_id}
‚Ä¢ –î–∞—Ç–∞: {payment.date}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º! üíñ
"""
            
            await message.answer(success_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
            bot_logger.log_admin_action("lifetime_granted", {
                "user_id": user_id,
                "payment_id": payment.telegram_payment_charge_id,
                "amount": payment.total_amount
            })
            
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to process successful payment for user {message.from_user.id}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @d_kolesov"
        )

@stars_router.message(Command("paysupport"))
@handle_errors
@handle_telegram_errors
async def pay_support_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /paysupport"""
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_logger.log_command(message.from_user.id, "paysupport")
    
    try:
        support_text = """
üí≥ –ü–û–î–î–ï–†–ñ–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô

üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
‚Ä¢ Telegram: @d_kolesov
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤

‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ö–∞–∫ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? ‚Üí /premium
‚Ä¢ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç? ‚Üí –ß–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –Ω–∏–∂–µ
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã? ‚Üí –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

üìã –£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:
"""
        
        refund_terms = stars_payment.get_refund_terms()
        
        await message.answer(
            support_text + refund_terms,
            reply_markup=stars_payment.create_pay_support_keyboard()
        )
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to send pay support info to user {message.from_user.id}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ")

@stars_router.callback_query(F.data == "refund_terms")
@handle_errors
@handle_telegram_errors
async def refund_terms_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É—Å–ª–æ–≤–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    
    try:
        refund_terms = stars_payment.get_refund_terms()
        
        await callback.message.edit_text(
            refund_terms,
            reply_markup=stars_payment.create_pay_support_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to show refund terms for user {callback.from_user.id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª–æ–≤–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞", show_alert=True)

@stars_router.callback_query(F.data == "buy_monthly_subscription")
@handle_errors
@handle_telegram_errors
async def buy_monthly_subscription_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lang = await get_user_language(callback.from_user.id)
        locale_manager.set_language(Language.ENGLISH if user_lang == "en" else Language.RUSSIAN)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞
        invoice_data = stars_payment.create_payment_invoice_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        await callback.message.answer_invoice(**invoice_data)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await callback.message.edit_text(
            f"{locale_manager.get_text('payment_stars')}\n\n"
            f"{locale_manager.get_text('payment_monthly_cost')}\n"
            f"{locale_manager.get_text('payment_valid')}\n\n"
            f"{locale_manager.get_text('premium_stars_info')}",
            reply_markup=None
        )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to process monthly subscription request for user {callback.from_user.id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@stars_router.callback_query(F.data == "buy_lifetime_access")
@handle_errors
@handle_telegram_errors
async def buy_lifetime_access_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lang = await get_user_language(callback.from_user.id)
        locale_manager.set_language(Language.ENGLISH if user_lang == "en" else Language.RUSSIAN)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞
        invoice_data = stars_payment.create_lifetime_invoice_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        await callback.message.answer_invoice(**invoice_data)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await callback.message.edit_text(
            f"üöÄ {locale_manager.get_text('payment_stars')}\n\n"
            f"{locale_manager.get_text('payment_lifetime_cost')}\n"
            f"{locale_manager.get_text('payment_valid')}\n\n"
            f"{locale_manager.get_text('premium_stars_info')}",
            reply_markup=None
        )
        
        await callback.answer()
        
    except Exception as e:
        bot_logger.log_system_error(e, f"Failed to process lifetime access request for user {callback.from_user.id}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
